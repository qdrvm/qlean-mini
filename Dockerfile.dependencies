# Stage 1: Build dependencies (vcpkg + system libs)
# Rebuild only when vcpkg.json changes

FROM ubuntu:24.04 AS dependencies

ARG DEBIAN_FRONTEND=noninteractive
ARG CMAKE_VERSION=3.31.1
ARG GCC_VERSION=14
ARG RUST_VERSION=stable

ENV DEBIAN_FRONTEND=${DEBIAN_FRONTEND}
ENV CMAKE_VERSION=${CMAKE_VERSION}
ENV GCC_VERSION=${GCC_VERSION}
ENV RUST_VERSION=${RUST_VERSION}
ENV VCPKG_FORCE_SYSTEM_BINARIES=1

ENV PROJECT=/qlean-mini
ENV VENV=${PROJECT}/.venv
ENV BUILD=${PROJECT}/.build-deps
ENV PATH=${VENV}/bin:/root/.cargo/bin:${PATH}
ENV CARGO_HOME=/root/.cargo
ENV RUSTUP_HOME=/root/.rustup

WORKDIR ${PROJECT}

# Copy only files needed for dependency installation
COPY .ci/ ${PROJECT}/.ci/
COPY vcpkg.json vcpkg-configuration.json ${PROJECT}/
COPY vcpkg-overlay/ ${PROJECT}/vcpkg-overlay/
COPY CMakeLists.txt CMakePresets.json ${PROJECT}/
COPY Makefile ${PROJECT}/

# Create minimal src structure (stubs for CMake)
RUN mkdir -p ${PROJECT}/src/app \
    ${PROJECT}/src/blockchain \
    ${PROJECT}/src/clock \
    ${PROJECT}/src/crypto \
    ${PROJECT}/src/executable \
    ${PROJECT}/src/injector \
    ${PROJECT}/src/log \
    ${PROJECT}/src/metrics \
    ${PROJECT}/src/modules \
    ${PROJECT}/src/se \
    ${PROJECT}/src/serde \
    ${PROJECT}/src/storage \
    ${PROJECT}/src/utils

# Create stub CMakeLists.txt files
RUN for dir in app blockchain clock crypto executable injector log metrics modules se serde storage utils; do \
        echo "# Stub" > ${PROJECT}/src/$dir/CMakeLists.txt; \
    done && \
    echo "# Stub for deps stage" > ${PROJECT}/src/CMakeLists.txt

# Install system dependencies
RUN set -eux; \
    apt-get update && \
    apt-get install -y --no-install-recommends zip unzip && \
    rm -rf /var/lib/apt/lists/*; \
    chmod +x .ci/scripts/*.sh; \
    ./.ci/scripts/init.sh; \
    rm -rf ${VENV}; \
    make init_py

# Install vcpkg dependencies
RUN --mount=type=cache,target=/qlean-mini/.vcpkg,id=vcpkg-deps \
    set -eux; \
    export PATH="${HOME}/.cargo/bin:${PATH}"; \
    source ${HOME}/.cargo/env 2>/dev/null || true; \
    if [ ! -f "/qlean-mini/.vcpkg/vcpkg" ]; then \
      make init_vcpkg; \
    fi; \
    printf '# Stub - skip building project sources\nmessage(STATUS "Dependencies stage: skipping project sources")\n' > ${PROJECT}/src/CMakeLists.txt; \
    VCPKG_ROOT=${PROJECT}/.vcpkg cmake -G Ninja --preset=default \
        -DPython3_EXECUTABLE="${VENV}/bin/python3" \
        -DTESTING=OFF \
        -B ${BUILD} \
        ${PROJECT}; \
    mkdir -p /opt/dependencies/vcpkg; \
    if [ -d "${BUILD}/vcpkg_installed" ]; then \
      cp -R ${BUILD}/vcpkg_installed /opt/dependencies/vcpkg/; \
    fi; \
    cp -R ${VENV} /opt/dependencies/venv; \
    cp -R ${PROJECT}/.vcpkg /opt/dependencies/vcpkg-install

# Final dependencies image
FROM ubuntu:24.04 AS dependencies-final

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    ninja-build \
    git \
    curl \
    ca-certificates \
    pkg-config \
    libstdc++6 \
    zip \
    unzip && \
    rm -rf /var/lib/apt/lists/*

ENV PROJECT=/qlean-mini
ENV VENV=${PROJECT}/.venv
ENV BUILD=${PROJECT}/.build
ENV PATH=${VENV}/bin:/root/.cargo/bin:${PATH}
ENV CARGO_HOME=/root/.cargo
ENV RUSTUP_HOME=/root/.rustup

COPY --from=dependencies /opt/dependencies/venv ${VENV}
COPY --from=dependencies /opt/dependencies/vcpkg-install ${PROJECT}/.vcpkg
COPY --from=dependencies /opt/dependencies/vcpkg/vcpkg_installed ${BUILD}/vcpkg_installed
COPY --from=dependencies /root/.cargo /root/.cargo
COPY --from=dependencies /root/.rustup /root/.rustup

WORKDIR ${PROJECT}

CMD ["/bin/bash"]
